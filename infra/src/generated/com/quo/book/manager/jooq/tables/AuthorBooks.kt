/*
 * This file is generated by jOOQ.
 */
package com.quo.book.manager.jooq.tables


import com.quo.book.manager.jooq.Public
import com.quo.book.manager.jooq.keys.AUTHOR_BOOKS_PKEY
import com.quo.book.manager.jooq.keys.AUTHOR_BOOKS__AUTHOR_BOOKS_AUTHOR_ID_FKEY
import com.quo.book.manager.jooq.keys.AUTHOR_BOOKS__AUTHOR_BOOKS_BOOK_ID_FKEY
import com.quo.book.manager.jooq.tables.Authors.AuthorsPath
import com.quo.book.manager.jooq.tables.Books.BooksPath
import com.quo.book.manager.jooq.tables.records.AuthorBooksRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AuthorBooks(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, AuthorBooksRecord>?,
    parentPath: InverseForeignKey<out Record, AuthorBooksRecord>?,
    aliased: Table<AuthorBooksRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<AuthorBooksRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.author_books</code>
         */
        val AUTHOR_BOOKS: AuthorBooks = AuthorBooks()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AuthorBooksRecord> = AuthorBooksRecord::class.java

    /**
     * The column <code>public.author_books.book_id</code>.
     */
    val BOOK_ID: TableField<AuthorBooksRecord, Int?> = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.author_books.author_id</code>.
     */
    val AUTHOR_ID: TableField<AuthorBooksRecord, Int?> = createField(DSL.name("author_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<AuthorBooksRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<AuthorBooksRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<AuthorBooksRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.author_books</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.author_books</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.author_books</code> table reference
     */
    constructor(): this(DSL.name("author_books"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, AuthorBooksRecord>?, parentPath: InverseForeignKey<out Record, AuthorBooksRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, AUTHOR_BOOKS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class AuthorBooksPath : AuthorBooks, Path<AuthorBooksRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, AuthorBooksRecord>?, parentPath: InverseForeignKey<out Record, AuthorBooksRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<AuthorBooksRecord>): super(alias, aliased)
        override fun `as`(alias: String): AuthorBooksPath = AuthorBooksPath(DSL.name(alias), this)
        override fun `as`(alias: Name): AuthorBooksPath = AuthorBooksPath(alias, this)
        override fun `as`(alias: Table<*>): AuthorBooksPath = AuthorBooksPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<AuthorBooksRecord> = AUTHOR_BOOKS_PKEY
    override fun getReferences(): List<ForeignKey<AuthorBooksRecord, *>> = listOf(AUTHOR_BOOKS__AUTHOR_BOOKS_AUTHOR_ID_FKEY, AUTHOR_BOOKS__AUTHOR_BOOKS_BOOK_ID_FKEY)

    private lateinit var _authors: AuthorsPath

    /**
     * Get the implicit join path to the <code>public.authors</code> table.
     */
    fun authors(): AuthorsPath {
        if (!this::_authors.isInitialized)
            _authors = AuthorsPath(this, AUTHOR_BOOKS__AUTHOR_BOOKS_AUTHOR_ID_FKEY, null)

        return _authors;
    }

    val authors: AuthorsPath
        get(): AuthorsPath = authors()

    private lateinit var _books: BooksPath

    /**
     * Get the implicit join path to the <code>public.books</code> table.
     */
    fun books(): BooksPath {
        if (!this::_books.isInitialized)
            _books = BooksPath(this, AUTHOR_BOOKS__AUTHOR_BOOKS_BOOK_ID_FKEY, null)

        return _books;
    }

    val books: BooksPath
        get(): BooksPath = books()
    override fun `as`(alias: String): AuthorBooks = AuthorBooks(DSL.name(alias), this)
    override fun `as`(alias: Name): AuthorBooks = AuthorBooks(alias, this)
    override fun `as`(alias: Table<*>): AuthorBooks = AuthorBooks(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AuthorBooks = AuthorBooks(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AuthorBooks = AuthorBooks(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): AuthorBooks = AuthorBooks(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): AuthorBooks = AuthorBooks(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): AuthorBooks = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): AuthorBooks = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): AuthorBooks = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): AuthorBooks = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): AuthorBooks = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): AuthorBooks = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): AuthorBooks = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): AuthorBooks = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): AuthorBooks = where(DSL.notExists(select))
}
