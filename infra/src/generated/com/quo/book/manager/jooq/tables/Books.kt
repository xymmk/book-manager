/*
 * This file is generated by jOOQ.
 */
package com.quo.book.manager.jooq.tables


import com.quo.book.manager.jooq.Public
import com.quo.book.manager.jooq.keys.AUTHOR_BOOKS__AUTHOR_BOOKS_BOOK_ID_FKEY
import com.quo.book.manager.jooq.keys.BOOKS_PKEY
import com.quo.book.manager.jooq.tables.AuthorBooks.AuthorBooksPath
import com.quo.book.manager.jooq.tables.Authors.AuthorsPath
import com.quo.book.manager.jooq.tables.records.BooksRecord

import java.math.BigDecimal

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Books(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BooksRecord>?,
    parentPath: InverseForeignKey<out Record, BooksRecord>?,
    aliased: Table<BooksRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BooksRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.books</code>
         */
        val BOOKS: Books = Books()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BooksRecord> = BooksRecord::class.java

    /**
     * The column <code>public.books.book_id</code>.
     */
    val BOOK_ID: TableField<BooksRecord, Int?> = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.books.price</code>.
     */
    val PRICE: TableField<BooksRecord, BigDecimal?> = createField(DSL.name("price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "")

    /**
     * The column <code>public.books.title</code>.
     */
    val TITLE: TableField<BooksRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(500).nullable(false), this, "")

    /**
     * The column <code>public.books.publication_status</code>.
     */
    val PUBLICATION_STATUS: TableField<BooksRecord, String?> = createField(DSL.name("publication_status"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BooksRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BooksRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BooksRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.books</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.books</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.books</code> table reference
     */
    constructor(): this(DSL.name("books"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BooksRecord>?, parentPath: InverseForeignKey<out Record, BooksRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BOOKS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class BooksPath : Books, Path<BooksRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BooksRecord>?, parentPath: InverseForeignKey<out Record, BooksRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<BooksRecord>): super(alias, aliased)
        override fun `as`(alias: String): BooksPath = BooksPath(DSL.name(alias), this)
        override fun `as`(alias: Name): BooksPath = BooksPath(alias, this)
        override fun `as`(alias: Table<*>): BooksPath = BooksPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<BooksRecord, Int?> = super.getIdentity() as Identity<BooksRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<BooksRecord> = BOOKS_PKEY

    private lateinit var _authorBooks: AuthorBooksPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.author_books</code> table
     */
    fun authorBooks(): AuthorBooksPath {
        if (!this::_authorBooks.isInitialized)
            _authorBooks = AuthorBooksPath(this, null, AUTHOR_BOOKS__AUTHOR_BOOKS_BOOK_ID_FKEY.inverseKey)

        return _authorBooks;
    }

    val authorBooks: AuthorBooksPath
        get(): AuthorBooksPath = authorBooks()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.authors</code> table
     */
    val authors: AuthorsPath
        get(): AuthorsPath = authorBooks().authors()
    override fun `as`(alias: String): Books = Books(DSL.name(alias), this)
    override fun `as`(alias: Name): Books = Books(alias, this)
    override fun `as`(alias: Table<*>): Books = Books(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Books = Books(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Books = Books(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Books = Books(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Books = Books(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Books = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Books = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Books = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Books = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Books = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Books = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Books = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Books = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Books = where(DSL.notExists(select))
}
