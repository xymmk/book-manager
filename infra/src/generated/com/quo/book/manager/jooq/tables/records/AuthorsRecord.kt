/*
 * This file is generated by jOOQ.
 */
package com.quo.book.manager.jooq.tables.records


import com.quo.book.manager.jooq.tables.Authors
import com.quo.book.manager.jooq.tables.interfaces.IAuthors

import java.time.LocalDate

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AuthorsRecord() : UpdatableRecordImpl<AuthorsRecord>(Authors.AUTHORS), IAuthors {

    open override var authorId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open override var authorName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open override var birthDate: LocalDate?
        set(value): Unit = set(2, value)
        get(): LocalDate? = get(2) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IAuthors) {
        this.authorId = from.authorId
        this.authorName = from.authorName
        this.birthDate = from.birthDate
        resetChangedOnNotNull()
    }

    override fun <E : IAuthors> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised AuthorsRecord
     */
    constructor(authorId: Int? = null, authorName: String? = null, birthDate: LocalDate? = null): this() {
        this.authorId = authorId
        this.authorName = authorName
        this.birthDate = birthDate
        resetChangedOnNotNull()
    }
}
