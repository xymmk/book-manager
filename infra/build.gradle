buildscript {
    dependencies {
        classpath("org.flywaydb:flyway-database-postgresql:10.10.0")
    }
}

plugins {
    id 'org.jooq.jooq-codegen-gradle' version "3.19.11"
    id 'org.flywaydb.flyway' version "10.10.0"
//    id("com.avast.gradle.docker-compose") version "0.17.12"
//    id("com.palantir.docker") version "0.36.0"
}

dependencies {
    implementation(project(':domain'))
    implementation("org.springframework.boot:spring-boot-starter-jooq")
    implementation 'org.springframework:spring-tx:6.2.2'
    runtimeOnly("org.postgresql:postgresql")
    implementation("org.jooq:jooq:3.19.11")
    implementation("org.jooq:jooq-meta:3.19.11")
    implementation("org.jooq:jooq-codegen:3.19.11")
    implementation("org.jooq:jooq-postgres-extensions:3.19.11")
    jooqCodegen("org.postgresql:postgresql:42.7.4")
}

def getDatabaseUrl() {
    def active = System.getenv("spring.profiles.active")
    println "Running in $active mode, executing script..."
    if (active == "test") {
        return "jdbc:postgresql://localhost:5432/book-manager"
    }
    if (active == "dev") {
        return "jdbc:postgresql://host.docker.internal:5432/book-manager"
    }
    if (active == "local") {
        return "jdbc:postgresql://localhost:5432/book-manager"
    }
    return "jdbc:postgresql://localhost:5432/book-manager"
}

jooq {
    configuration {

        jdbc {
            driver = "org.postgresql.Driver"
            url = getDatabaseUrl()
            user = "postgres"
            password = "postgres"
        }
        generator {
            name = 'org.jooq.codegen.KotlinGenerator'
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
                includes = ".*"
                excludes = "flyway_schema_history"
            }
            generate {
                deprecated = false
                kotlinSetterJvmNameAnnotationsOnIsPrefix = true
                pojosAsKotlinDataClasses = true
                fluentSetters = true
                interfaces = true
            }
            target {
                packageName = "com.quo.book.manager.jooq"
                directory = 'src/generated'
            }
        }
    }
}

sourceSets {
    main {
        kotlin.srcDir("src/generated")
    }
}

tasks.named("compileKotlin") {
    dependsOn(tasks.named("jooqCodegen"))
}

flyway {
    driver = "org.postgresql.Driver"
    //docker環境でビルドする場合、環境変数から取得し、コンテナのDBに接続する
    url = getDatabaseUrl()
    user = "postgres"
    password = "postgres"
    schemas = ["public"]
    cleanDisabled = false
}

tasks.named("jooqCodegen") {
    dependsOn(tasks.named("flywayMigrate"))
    inputs.files(fileTree("src/main/resources/db/migration"))
}

flywayMigrate.dependsOn flywayRepair

tasks.register("startPostgresql") {
    doLast {
        def active = System.getenv("spring.profiles.active")
        println "Running in $active mode, executing script..."
        if (active == "test") {
            exec {
                commandLine 'sh', 'startup_postgresql.sh'
            }
        }
    }
}


flywayMigrate.dependsOn tasks.named("flywayRepair")
flywayRepair.dependsOn tasks.named("startPostgresql")
